import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {\n  Target,\n  CheckCircle,\n  Clock,\n  TrendingUp,\n  Star,\n  Calendar,\n  Award,\n  BookOpen,\n  RotateCcw,\n  Download,\n  Plus,\n  Edit,\n  X,\n  Brain,\n  Heart,\n  Wind,\n  Activity,\n  Lightbulb,\n  AlertCircle,\n  Trophy,\n  BarChart3,\n  PieChart,\n  LineChart,\n  Users,\n  Save,\n} from \"lucide-react\";\n\ninterface ProgressData {\n  moduleStarted: string;\n  completedSections: string[];\n  quizScore: number;\n  breathingSessions: number;\n  relaxationSessions: number;\n  stressChecks: number;\n  personalGoals: Goal[];\n  achievements: Achievement[];\n  weeklyGoals: WeeklyGoal[];\n  practiceStreak: number;\n  totalPracticeTime: number; // en minutes\n}\n\ninterface Goal {\n  id: string;\n  title: string;\n  description: string;\n  category: \"breathing\" | \"relaxation\" | \"awareness\" | \"lifestyle\" | \"work\";\n  priority: \"low\" | \"medium\" | \"high\";\n  target: number;\n  current: number;\n  unit: string;\n  deadline: string;\n  completed: boolean;\n  createdAt: string;\n}\n\ninterface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  unlockedAt: string;\n  category: string;\n}\n\ninterface WeeklyGoal {\n  week: string;\n  goals: {\n    breathing: number;\n    relaxation: number;\n    stressChecks: number;\n  };\n  completed: {\n    breathing: number;\n    relaxation: number;\n    stressChecks: number;\n  };\n}\n\nconst achievements = [\n  {\n    id: \"first-breath\",\n    title: \"Premier souffle\",\n    description: \"Premi√®re s√©ance de respiration termin√©e\",\n    icon: \"ü´Å\",\n    category: \"breathing\",\n    requirement: { type: \"breathing\", count: 1 }\n  },\n  {\n    id: \"zen-master\",\n    title: \"Ma√Ætre zen\",\n    description: \"10 s√©ances de relaxation compl√©t√©es\",\n    icon: \"üßò\",\n    category: \"relaxation\",\n    requirement: { type: \"relaxation\", count: 10 }\n  },\n  {\n    id: \"self-aware\",\n    title: \"Conscience de soi\",\n    description: \"7 jours cons√©cutifs de suivi du stress\",\n    icon: \"üéØ\",\n    category: \"awareness\",\n    requirement: { type: \"streak\", count: 7 }\n  },\n  {\n    id: \"quiz-master\",\n    title: \"Expert en th√©orie\",\n    description: \"Quiz termin√© avec 80% de bonnes r√©ponses\",\n    icon: \"üéì\",\n    category: \"knowledge\",\n    requirement: { type: \"quiz\", score: 80 }\n  },\n  {\n    id: \"marathon\",\n    title: \"Marathon de la zen\",\n    description: \"100 minutes de pratique cumul√©es\",\n    icon: \"üèÉ‚Äç‚ôÇÔ∏è\",\n    category: \"practice\",\n    requirement: { type: \"totalTime\", minutes: 100 }\n  },\n  {\n    id: \"consistent\",\n    title: \"R√©gularit√©\",\n    description: \"14 jours de pratique en 30 jours\",\n    icon: \"üìÖ\",\n    category: \"consistency\",\n    requirement: { type: \"consistency\", days: 14, period: 30 }\n  }\n];\n\nconst modulesSections = [\n  { id: \"intro\", name: \"Introduction au stress\", weight: 10 },\n  { id: \"mechanisms\", name: \"M√©canismes du stress\", weight: 15 },\n  { id: \"signals\", name: \"Signaux d'alarme\", weight: 15 },\n  { id: \"quiz\", name: \"Quiz de compr√©hension\", weight: 20 },\n  { id: \"breathing\", name: \"Exercices de respiration\", weight: 15 },\n  { id: \"relaxation\", name: \"Techniques de relaxation\", weight: 15 },\n  { id: \"action-plan\", name: \"Plan d'action personnalis√©\", weight: 10 }\n];\n\nexport default function ProgressTracker() {\n  const [progressData, setProgressData] = useState<ProgressData>({\n    moduleStarted: new Date().toISOString(),\n    completedSections: [],\n    quizScore: 0,\n    breathingSessions: 0,\n    relaxationSessions: 0,\n    stressChecks: 0,\n    personalGoals: [],\n    achievements: [],\n    weeklyGoals: [],\n    practiceStreak: 0,\n    totalPracticeTime: 0\n  });\n  \n  const [currentView, setCurrentView] = useState<\"overview\" | \"goals\" | \"achievements\" | \"analytics\">(\"overview\");\n  const [newGoal, setNewGoal] = useState<Partial<Goal>>({});\n  const [showNewGoalForm, setShowNewGoalForm] = useState(false);\n\n  useEffect(() => {\n    const savedProgress = localStorage.getItem(\"stress-module-progress\");\n    if (savedProgress) {\n      setProgressData(JSON.parse(savedProgress));\n    }\n    \n    // Initialiser la semaine courante si elle n'existe pas\n    const currentWeek = getWeekString(new Date());\n    setProgressData(prev => {\n      if (!prev.weeklyGoals.find(w => w.week === currentWeek)) {\n        return {\n          ...prev,\n          weeklyGoals: [\n            {\n              week: currentWeek,\n              goals: { breathing: 3, relaxation: 2, stressChecks: 7 },\n              completed: { breathing: 0, relaxation: 0, stressChecks: 0 }\n            },\n            ...prev.weeklyGoals\n          ]\n        };\n      }\n      return prev;\n    });\n  }, []);\n\n  const saveProgress = (newData: ProgressData) => {\n    setProgressData(newData);\n    localStorage.setItem(\"stress-module-progress\", JSON.stringify(newData));\n  };\n\n  const getWeekString = (date: Date) => {\n    const year = date.getFullYear();\n    const week = getWeekNumber(date);\n    return `${year}-W${week.toString().padStart(2, '0')}`;\n  };\n\n  const getWeekNumber = (date: Date) => {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  };\n\n  const calculateModuleProgress = () => {\n    return modulesSections.reduce((total, section) => {\n      return total + (progressData.completedSections.includes(section.id) ? section.weight : 0);\n    }, 0);\n  };\n\n  const checkAchievements = (newData: ProgressData) => {\n    const unlockedAchievements = [...newData.achievements];\n    \n    achievements.forEach(achievement => {\n      if (unlockedAchievements.find(a => a.id === achievement.id)) return;\n      \n      let shouldUnlock = false;\n      \n      switch (achievement.requirement.type) {\n        case \"breathing\":\n          shouldUnlock = newData.breathingSessions >= achievement.requirement.count;\n          break;\n        case \"relaxation\":\n          shouldUnlock = newData.relaxationSessions >= achievement.requirement.count;\n          break;\n        case \"quiz\":\n          shouldUnlock = newData.quizScore >= achievement.requirement.score;\n          break;\n        case \"totalTime\":\n          shouldUnlock = newData.totalPracticeTime >= achievement.requirement.minutes;\n          break;\n        case \"streak\":\n          shouldUnlock = newData.practiceStreak >= achievement.requirement.count;\n          break;\n      }\n      \n      if (shouldUnlock) {\n        unlockedAchievements.push({\n          id: achievement.id,\n          title: achievement.title,\n          description: achievement.description,\n          icon: achievement.icon,\n          unlockedAt: new Date().toISOString(),\n          category: achievement.category\n        });\n      }\n    });\n    \n    return { ...newData, achievements: unlockedAchievements };\n  };\n\n  const addGoal = () => {\n    if (!newGoal.title || !newGoal.target) return;\n    \n    const goal: Goal = {\n      id: Date.now().toString(),\n      title: newGoal.title!,\n      description: newGoal.description || \"\",\n      category: newGoal.category || \"breathing\",\n      priority: newGoal.priority || \"medium\",\n      target: newGoal.target!,\n      current: 0,\n      unit: newGoal.unit || \"s√©ances\",\n      deadline: newGoal.deadline || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n      completed: false,\n      createdAt: new Date().toISOString()\n    };\n    \n    const newData = {\n      ...progressData,\n      personalGoals: [...progressData.personalGoals, goal]\n    };\n    \n    saveProgress(checkAchievements(newData));\n    setNewGoal({});\n    setShowNewGoalForm(false);\n  };\n\n  const updateGoalProgress = (goalId: string, increment: number) => {\n    const newData = {\n      ...progressData,\n      personalGoals: progressData.personalGoals.map(goal => {\n        if (goal.id === goalId) {\n          const newCurrent = Math.max(0, goal.current + increment);\n          return {\n            ...goal,\n            current: newCurrent,\n            completed: newCurrent >= goal.target\n          };\n        }\n        return goal;\n      })\n    };\n    \n    saveProgress(checkAchievements(newData));\n  };\n\n  const exportProgress = () => {\n    const report = {\n      date: new Date().toLocaleDateString(),\n      moduleProgress: `${calculateModuleProgress()}%`,\n      completedSections: progressData.completedSections,\n      practiceStats: {\n        breathingSessions: progressData.breathingSessions,\n        relaxationSessions: progressData.relaxationSessions,\n        totalPracticeTime: `${progressData.totalPracticeTime} minutes`,\n        practiceStreak: `${progressData.practiceStreak} jours`\n      },\n      goals: progressData.personalGoals,\n      achievements: progressData.achievements\n    };\n    \n    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `rapport-progression-stress-${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-yellow-100 text-yellow-800\";\n      case \"low\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"breathing\": return Wind;\n      case \"relaxation\": return Brain;\n      case \"awareness\": return Target;\n      case \"lifestyle\": return Heart;\n      case \"work\": return Users;\n      default: return Activity;\n    }\n  };\n\n  const currentWeekGoals = progressData.weeklyGoals.find(w => w.week === getWeekString(new Date()));\n\n  // Vue d'ensemble\n  if (currentView === \"overview\") {\n    return (\n      <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Suivi de progression</h2>\n            <p className=\"text-gray-600\">Votre parcours personnel de ma√Ætrise du stress</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={exportProgress} variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Exporter\n            </Button>\n          </div>\n        </div>\n\n        {/* Progression g√©n√©rale */}\n        <div className=\"grid md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <BookOpen className=\"w-8 h-8 text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n                {calculateModuleProgress()}%\n              </div>\n              <p className=\"text-sm text-blue-700\">Module compl√©t√©</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-green-50 to-emerald-50 border-green-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Wind className=\"w-8 h-8 text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-green-600 mb-1\">\n                {progressData.breathingSessions}\n              </div>\n              <p className=\"text-sm text-green-700\">S√©ances respiration</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-50 to-violet-50 border-purple-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Brain className=\"w-8 h-8 text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-purple-600 mb-1\">\n                {progressData.relaxationSessions}\n              </div>\n              <p className=\"text-sm text-purple-700\">S√©ances relaxation</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-amber-50 border-orange-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-orange-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Target className=\"w-8 h-8 text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-orange-600 mb-1\">\n                {progressData.stressChecks}\n              </div>\n              <p className=\"text-sm text-orange-700\">Suivis du stress</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Objectifs hebdomadaires */}\n        {currentWeekGoals && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Objectifs de la semaine\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-blue-900\">Respiration</span>\n                    <Wind className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {currentWeekGoals.completed.breathing}/{currentWeekGoals.goals.breathing}\n                  </div>\n                  <div className=\"w-full bg-blue-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full\" \n                      style={{ width: `${(currentWeekGoals.completed.breathing / currentWeekGoals.goals.breathing) * 100}%` }}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"bg-purple-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-purple-900\">Relaxation</span>\n                    <Brain className=\"w-4 h-4 text-purple-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {currentWeekGoals.completed.relaxation}/{currentWeekGoals.goals.relaxation}\n                  </div>\n                  <div className=\"w-full bg-purple-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-purple-600 h-2 rounded-full\" \n                      style={{ width: `${(currentWeekGoals.completed.relaxation / currentWeekGoals.goals.relaxation) * 100}%` }}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"bg-orange-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-orange-900\">Suivi stress</span>\n                    <Target className=\"w-4 h-4 text-orange-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {currentWeekGoals.completed.stressChecks}/{currentWeekGoals.goals.stressChecks}\n                  </div>\n                  <div className=\"w-full bg-orange-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-orange-600 h-2 rounded-full\" \n                      style={{ width: `${(currentWeekGoals.completed.stressChecks / currentWeekGoals.goals.stressChecks) * 100}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Statistiques d√©taill√©es */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Statistiques de pratique\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-sm font-medium\">Temps total de pratique</span>\n                <span className=\"text-lg font-bold text-primary\">{progressData.totalPracticeTime} min</span>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-sm font-medium\">S√©rie actuelle</span>\n                <span className=\"text-lg font-bold text-green-600\">{progressData.practiceStreak} jours</span>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-sm font-medium\">Score au quiz</span>\n                <span className=\"text-lg font-bold text-blue-600\">{progressData.quizScore}%</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Trophy className=\"w-5 h-5\" />\n                Succ√®s r√©cents\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {progressData.achievements.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {progressData.achievements.slice(-3).map(achievement => (\n                    <div key={achievement.id} className=\"flex items-center gap-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n                      <span className=\"text-2xl\">{achievement.icon}</span>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-yellow-900\">{achievement.title}</h4>\n                        <p className=\"text-sm text-yellow-700\">{achievement.description}</p>\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\">\n                        {new Date(achievement.unlockedAt).toLocaleDateString()}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Trophy className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n                  <p>Continuez vos efforts pour d√©bloquer vos premiers succ√®s !</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Navigation rapide */}\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          <Button \n            onClick={() => setCurrentView(\"goals\")} \n            variant=\"outline\" \n            className=\"h-20 flex-col gap-2\"\n          >\n            <Target className=\"w-6 h-6\" />\n            <span>Mes objectifs</span>\n          </Button>\n          <Button \n            onClick={() => setCurrentView(\"achievements\")} \n            variant=\"outline\" \n            className=\"h-20 flex-col gap-2\"\n          >\n            <Award className=\"w-6 h-6\" />\n            <span>Mes succ√®s</span>\n          </Button>\n          <Button \n            onClick={() => setCurrentView(\"analytics\")} \n            variant=\"outline\" \n            className=\"h-20 flex-col gap-2\"\n          >\n            <BarChart3 className=\"w-6 h-6\" />\n            <span>Analytiques</span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Vue objectifs\n  if (currentView === \"goals\") {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Mes objectifs personnels</h2>\n            <p className=\"text-gray-600\">D√©finissez et suivez vos objectifs de ma√Ætrise du stress</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button onClick={() => setShowNewGoalForm(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nouvel objectif\n            </Button>\n            <Button onClick={() => setCurrentView(\"overview\")} variant=\"outline\">\n              Retour\n            </Button>\n          </div>\n        </div>\n\n        {/* Formulaire nouvel objectif */}\n        {showNewGoalForm && (\n          <Card className=\"border-2 border-primary/20\">\n            <CardHeader>\n              <CardTitle>Cr√©er un nouvel objectif</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Titre de l'objectif</label>\n                  <input\n                    type=\"text\"\n                    value={newGoal.title || \"\"}\n                    onChange={(e) => setNewGoal(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Ex: Pratiquer la respiration quotidiennement\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Cat√©gorie</label>\n                  <select\n                    value={newGoal.category || \"breathing\"}\n                    onChange={(e) => setNewGoal(prev => ({ ...prev, category: e.target.value as any }))}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  >\n                    <option value=\"breathing\">Respiration</option>\n                    <option value=\"relaxation\">Relaxation</option>\n                    <option value=\"awareness\">Conscience du stress</option>\n                    <option value=\"lifestyle\">Mode de vie</option>\n                    <option value=\"work\">Travail</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Objectif chiffr√©</label>\n                  <input\n                    type=\"number\"\n                    value={newGoal.target || \"\"}\n                    onChange={(e) => setNewGoal(prev => ({ ...prev, target: parseInt(e.target.value) }))}\n                    placeholder=\"Ex: 30\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Unit√©</label>\n                  <input\n                    type=\"text\"\n                    value={newGoal.unit || \"\"}\n                    onChange={(e) => setNewGoal(prev => ({ ...prev, unit: e.target.value }))}\n                    placeholder=\"Ex: s√©ances, minutes, jours\"\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Priorit√©</label>\n                  <select\n                    value={newGoal.priority || \"medium\"}\n                    onChange={(e) => setNewGoal(prev => ({ ...prev, priority: e.target.value as any }))}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  >\n                    <option value=\"low\">Basse</option>\n                    <option value=\"medium\">Moyenne</option>\n                    <option value=\"high\">Haute</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">√âch√©ance</label>\n                  <input\n                    type=\"date\"\n                    value={newGoal.deadline ? newGoal.deadline.split('T')[0] : \"\"}\n                    onChange={(e) => setNewGoal(prev => ({ ...prev, deadline: e.target.value + 'T00:00:00' }))}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description (optionnelle)</label>\n                <textarea\n                  value={newGoal.description || \"\"}\n                  onChange={(e) => setNewGoal(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"D√©crivez votre objectif plus en d√©tail...\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button onClick={addGoal}>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Cr√©er l'objectif\n                </Button>\n                <Button onClick={() => setShowNewGoalForm(false)} variant=\"outline\">\n                  Annuler\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Liste des objectifs */}\n        <div className=\"space-y-4\">\n          {progressData.personalGoals.length > 0 ? (\n            progressData.personalGoals.map(goal => {\n              const CategoryIcon = getCategoryIcon(goal.category);\n              const progress = (goal.current / goal.target) * 100;\n              const isOverdue = new Date(goal.deadline) < new Date() && !goal.completed;\n              \n              return (\n                <Card key={goal.id} className={`${goal.completed ? 'bg-green-50 border-green-200' : isOverdue ? 'bg-red-50 border-red-200' : ''}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className={`p-2 rounded-lg ${goal.completed ? 'bg-green-100' : isOverdue ? 'bg-red-100' : 'bg-gray-100'}`}>\n                          <CategoryIcon className={`w-5 h-5 ${goal.completed ? 'text-green-600' : isOverdue ? 'text-red-600' : 'text-gray-600'}`} />\n                        </div>\n                        <div>\n                          <h3 className={`text-lg font-semibold ${goal.completed ? 'text-green-900 line-through' : 'text-gray-900'}`}>\n                            {goal.title}\n                          </h3>\n                          {goal.description && (\n                            <p className=\"text-gray-600 text-sm mt-1\">{goal.description}</p>\n                          )}\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <Badge variant=\"outline\" className={getPriorityColor(goal.priority)}>\n                              {goal.priority === 'high' && 'Haute priorit√©'}\n                              {goal.priority === 'medium' && 'Priorit√© moyenne'}\n                              {goal.priority === 'low' && 'Basse priorit√©'}\n                            </Badge>\n                            <Badge variant=\"outline\">\n                              √âch√©ance: {new Date(goal.deadline).toLocaleDateString()}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {!goal.completed && (\n                        <div className=\"flex gap-1\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => updateGoalProgress(goal.id, -1)}\n                            disabled={goal.current <= 0}\n                          >\n                            ‚àí\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            onClick={() => updateGoalProgress(goal.id, 1)}\n                          >\n                            +\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">Progression</span>\n                        <span className={`font-medium ${goal.completed ? 'text-green-600' : 'text-gray-900'}`}>\n                          {goal.current}/{goal.target} {goal.unit}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full transition-all duration-300 ${\n                            goal.completed ? 'bg-green-500' : isOverdue ? 'bg-red-500' : 'bg-blue-500'\n                          }`}\n                          style={{ width: `${Math.min(progress, 100)}%` }}\n                        />\n                      </div>\n                      <div className=\"text-right text-sm text-gray-500\">\n                        {Math.round(progress)}% compl√©t√©\n                      </div>\n                    </div>\n                    \n                    {goal.completed && (\n                      <div className=\"mt-3 flex items-center gap-2 text-green-600\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                        <span className=\"text-sm font-medium\">Objectif atteint !</span>\n                      </div>\n                    )}\n                    \n                    {isOverdue && (\n                      <div className=\"mt-3 flex items-center gap-2 text-red-600\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        <span className=\"text-sm font-medium\">√âch√©ance d√©pass√©e</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Target className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucun objectif d√©fini</h3>\n                <p className=\"text-gray-600 mb-4\">Cr√©ez votre premier objectif pour commencer votre suivi personnalis√©.</p>\n                <Button onClick={() => setShowNewGoalForm(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Cr√©er mon premier objectif\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Vue succ√®s\n  if (currentView === \"achievements\") {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Mes succ√®s</h2>\n            <p className=\"text-gray-600\">C√©l√©brez vos accomplissements dans la ma√Ætrise du stress</p>\n          </div>\n          <Button onClick={() => setCurrentView(\"overview\")} variant=\"outline\">\n            Retour\n          </Button>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {achievements.map(achievement => {\n            const isUnlocked = progressData.achievements.find(a => a.id === achievement.id);\n            \n            return (\n              <Card key={achievement.id} className={`${isUnlocked ? 'bg-yellow-50 border-yellow-200' : 'bg-gray-50 border-gray-200'}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className={`text-4xl ${isUnlocked ? '' : 'grayscale opacity-50'}`}>\n                      {achievement.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className={`text-lg font-semibold mb-2 ${isUnlocked ? 'text-yellow-900' : 'text-gray-500'}`}>\n                        {achievement.title}\n                      </h3>\n                      <p className={`text-sm mb-3 ${isUnlocked ? 'text-yellow-700' : 'text-gray-400'}`}>\n                        {achievement.description}\n                      </p>\n                      \n                      {isUnlocked ? (\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-sm text-green-600 font-medium\">\n                            D√©bloqu√© le {new Date(isUnlocked.unlockedAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"w-4 h-4 text-gray-400\" />\n                          <span className=\"text-sm text-gray-400\">Non d√©bloqu√©</span>\n                        </div>\n                      )}\n                      \n                      <Badge variant=\"outline\" className={`mt-2 ${isUnlocked ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-600'}`}>\n                        {achievement.category}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200\">\n          <CardContent className=\"p-6 text-center\">\n            <Trophy className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-blue-900 mb-2\">\n              Progression des succ√®s\n            </h3>\n            <p className=\"text-blue-700 mb-4\">\n              {progressData.achievements.length}/{achievements.length} succ√®s d√©bloqu√©s\n            </p>\n            <div className=\"w-full bg-blue-200 rounded-full h-3\">\n              <div \n                className=\"bg-blue-600 h-3 rounded-full transition-all duration-500\"\n                style={{ width: `${(progressData.achievements.length / achievements.length) * 100}%` }}\n              />\n            </div>\n            <p className=\"text-sm text-blue-600 mt-2\">\n              {Math.round((progressData.achievements.length / achievements.length) * 100)}% compl√©t√©\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Vue analytiques\n  if (currentView === \"analytics\") {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Analytiques d√©taill√©es</h2>\n            <p className=\"text-gray-600\">Analysez vos patterns et votre √©volution</p>\n          </div>\n          <Button onClick={() => setCurrentView(\"overview\")} variant=\"outline\">\n            Retour\n          </Button>\n        </div>\n\n        {/* Statistiques globales */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <BarChart3 className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                {progressData.totalPracticeTime}\n              </div>\n              <p className=\"text-sm text-gray-600\">Minutes de pratique totales</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Moyenne: {Math.round(progressData.totalPracticeTime / Math.max(progressData.breathingSessions + progressData.relaxationSessions, 1))} min/s√©ance\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <PieChart className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">\n                {progressData.practiceStreak}\n              </div>\n              <p className=\"text-sm text-gray-600\">Jours de s√©rie actuelle</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Record personnel √† battre !\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <LineChart className=\"w-8 h-8 text-purple-600 mx-auto mb-3\" />\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">\n                {Math.round((progressData.personalGoals.filter(g => g.completed).length / Math.max(progressData.personalGoals.length, 1)) * 100)}%\n              </div>\n              <p className=\"text-sm text-gray-600\">Objectifs atteints</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {progressData.personalGoals.filter(g => g.completed).length}/{progressData.personalGoals.length} objectifs\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* R√©partition des activit√©s */}\n        <Card>\n          <CardHeader>\n            <CardTitle>R√©partition des activit√©s</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Wind className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium\">Exercices de respiration</span>\n                </div>\n                <span className=\"text-sm text-gray-600\">\n                  {progressData.breathingSessions} s√©ances ({Math.round((progressData.breathingSessions / Math.max(progressData.breathingSessions + progressData.relaxationSessions, 1)) * 100)}%)\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-500 h-2 rounded-l-full\"\n                  style={{ width: `${(progressData.breathingSessions / Math.max(progressData.breathingSessions + progressData.relaxationSessions, 1)) * 100}%` }}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Brain className=\"w-4 h-4 text-purple-600\" />\n                  <span className=\"text-sm font-medium\">Techniques de relaxation</span>\n                </div>\n                <span className=\"text-sm text-gray-600\">\n                  {progressData.relaxationSessions} s√©ances ({Math.round((progressData.relaxationSessions / Math.max(progressData.breathingSessions + progressData.relaxationSessions, 1)) * 100)}%)\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-purple-500 h-2 rounded-l-full\"\n                  style={{ width: `${(progressData.relaxationSessions / Math.max(progressData.breathingSessions + progressData.relaxationSessions, 1)) * 100}%` }}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recommandations personnalis√©es */}\n        <Card className=\"bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lightbulb className=\"w-5 h-5\" />\n              Recommandations personnalis√©es\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {progressData.breathingSessions < 5 && (\n                <div className=\"flex items-start gap-3 p-3 bg-blue-50 rounded-lg\">\n                  <Wind className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-blue-900\">D√©veloppez votre pratique respiratoire</p>\n                    <p className=\"text-xs text-blue-700\">Essayez de pratiquer 5 minutes de respiration chaque matin.</p>\n                  </div>\n                </div>\n              )}\n              \n              {progressData.relaxationSessions < 3 && (\n                <div className=\"flex items-start gap-3 p-3 bg-purple-50 rounded-lg\">\n                  <Brain className=\"w-5 h-5 text-purple-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-purple-900\">Explorez la relaxation</p>\n                    <p className=\"text-xs text-purple-700\">Les techniques de relaxation progressive peuvent compl√©ter votre pratique.</p>\n                  </div>\n                </div>\n              )}\n              \n              {progressData.stressChecks < 7 && (\n                <div className=\"flex items-start gap-3 p-3 bg-orange-50 rounded-lg\">\n                  <Target className=\"w-5 h-5 text-orange-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-orange-900\">Renforcez votre auto-observation</p>\n                    <p className=\"text-xs text-orange-700\">Un suivi quotidien vous aidera √† mieux identifier vos patterns de stress.</p>\n                  </div>\n                </div>\n              )}\n              \n              {progressData.personalGoals.length === 0 && (\n                <div className=\"flex items-start gap-3 p-3 bg-green-50 rounded-lg\">\n                  <Target className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-green-900\">D√©finissez vos objectifs</p>\n                    <p className=\"text-xs text-green-700\">Cr√©er des objectifs personnels vous motivera dans votre parcours.</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return null;\n}\n"